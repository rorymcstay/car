[[inputs.logparser]]
  ## file(s) to tail:
  files = ["/var/log/car_app/market.log"]

  from_beginning = false
  [inputs.logparser.grok]
    custom_pattern_files = ["/etc/telegraf/patterns.conf"]
    patterns = ["%{BASE}%{PAGE_SIZE}"]
    measurement = "%{}"

[[inputs.logparser]]
  files = ["/var/log/car_app/market.log"]
  from_beginning = false

  [inputs.logparser.grok]
    custom_pattern_files = ["/etc/telegraf/patterns.conf"]
    patterns = ["%{BASE}%{M_COLLECTED}"]
    measurement = "collected"

[[inputs.logparser]]
  files = ["/var/log/car_app/worker.log"]
  from_beginning = false

  [inputs.logparser.grok]
    custom_pattern_files = ["/etc/telegraf/patterns.conf"]
    patterns = ["%{BASE}%{W_COLLECTED}"]
    measurement = "w_collected"

[[inputs.logparser]]
  ## file(s) to tail:
  files = ["/var/log/car_app/worker.log"]
  from_beginning = false

  [inputs.logparser.grok]
    patterns = ["%{BASE}%{PARSED}"]
    measurement = "parsed"
    custom_pattern_files = ["/etc/telegraf/patterns.conf"]

[[inputs.logparser]]
  ## file(s) to tail:
  files = ["/var/log/car_app/worker.log"]
  from_beginning = false

  [inputs.logparser.grok]
    custom_pattern_files = ["/etc/telegraf/patterns.conf"]
    patterns = ["%{BASE}%{SCRAPED}"]
    measurement = "scraped"

[[inputs.docker]]
## Docker Endpoint
##   To use TCP, set endpoint = "tcp://[ip]:[port]"
##   To use environment variables (ie, docker-machine), set endpoint = "ENV"
endpoint = "unix:///var/run/docker.sock"

## Set to true to collect Swarm metrics(desired_replicas, running_replicas)
## Note: configure this in one of the manager nodes in a Swarm cluster.
## configuring in multiple Swarm managers results in duplication of metrics.
gather_services = false

## Only collect metrics for these containers. Values will be appended to
## container_name_include.
## Deprecated (1.4.0), use container_name_include
container_names = []

## Containers to include and exclude. Collect all if empty. Globs accepted.
container_name_include = []
container_name_exclude = []

## Container states to include and exclude. Globs accepted.
## When empty only containers in the "running" state will be captured.
# container_state_include = []
# container_state_exclude = []

## Timeout for docker list, info, and stats commands
timeout = "5s"

## Whether to report for each container per-device blkio (8:0, 8:1...) and
## network (eth0, eth1, ...) stats or not
perdevice = true

## Whether to report for each container total blkio and network stats or not
total = false

## docker labels to include and exclude as tags.  Globs accepted.
## Note that an empty array for both will include all labels as tags
docker_label_include = []
docker_label_exclude = []

## Which environment variables should we use as a tag
# tag_env = ["JAVA_HOME", "HEAP_SIZE"]

## Optional TLS Config
# tls_ca = "/etc/telegraf/ca.pem"
# tls_cert = "/etc/telegraf/cert.pem"
# tls_key = "/etc/telegraf/key.pem"
## Use TLS but skip chain & host verification
# insecure_skip_verify = false

[[outputs.influxdb]]
  ## The full HTTP or UDP endpoint URL for your InfluxDB instance.
  urls = ["http://influxdb:8086"]
  ## The target database for metrics (telegraf will create it if not exists).
  database = "telegraf" # required
  ## Write timeout (for the InfluxDB client), formatted as a string.
  timeout = "5s"
  username = "root"
  password = "root"

[[outputs.file]]
  files = ["stdout"]
# *.*\* : p
#https://github.com/influxdata/telegraf/tree/master/plugins/inputs/logparser
#https://www.elastic.co/guide/en/logstash/current/plugins-filters-grok.html
